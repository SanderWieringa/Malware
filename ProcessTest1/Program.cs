using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.Diagnostics;

namespace ProcessTest1
{
    internal class Program
    {
        private static void Main()
        {
            bool isVm = IsVirtualMachinePresentRegistry();
            //isVm = IsVirtualMachinePresentProcesses();
            

            

            Console.WriteLine("======================================================================================");
            Console.WriteLine(isVm ? "Host is a virtual machine" : "Host is not a virtual machine");
        }

        public static bool IsVirtualMachinePresentRegistry()
        {
            try
            {
                RegistryKey key = Registry.LocalMachine;
                key = key.OpenSubKey(@"SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList", true);
                {
                    foreach (var keyName in key.GetSubKeyNames())
                    {
                        RegistryKey key2 = key.OpenSubKey(keyName);
                        Console.WriteLine(key2.GetValue("KEY_NAME"));
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
            }
            return default;
        }

        public static bool IsVirtualMachinePresentProcesses()
        {
            var runningProcesses = Process.GetProcesses();
            var vmProcesses = new List<string>
            {
                "vmware-wmx",
                "VboxService",
                "VboxTray",
                "vm3dservice",
                "VMwareService",
                "VMwareTray",
                "VMwareUser"
            };

            foreach (Process process in runningProcesses)
            {
                Console.WriteLine(process.ProcessName);
                if (!vmProcesses.Contains(process.ProcessName)) continue;
                return true;
            }

            return false;
        }
    }
}
